RELEASE NOTES FOR PANINI 0.9.3
These release notes summarizes changes in Panini 0.9.3 release.
Note that feature releases and bug fixes are cumulative, that is, 
bug fixes in previous update versions are included in subsequent 
update versions.

**Release overview 
    Panini's release 0.9.3 fixes user-reported bugs, 
    adds support for declaring methods that can return final 
    classes, improves confinement and effect analyzers of the 
    compiler and improves some examples.

** Bug Fixes
* Fixed an issue where declaring duplicate capsule instances 
  did not produces proper error. [SourceForge Bug#28]
     
* Fixed an issue where for a capsule state of type of a class c, 
  methods of super classes of c were not accessible to the capsule 
  for invocation . [SourceForge Bug#29] 
    
* Fixed an issue where declaring capsules as states does not produces 
  proper error messages. [SourceForge Bug#30]
     
* Fixed several error messages that were not providing sufficient/correct 
  information to track the errors.
    
* Fixed an issue where garbage collector was not working correctly with 
  programs containing multiple design declarations.
     
* Fixed an issue where the panini.bat script for Windows operating 
  system was not passing command-line arguments correctly.
    
* Fixed an issue where inner classes declared in capsules were 
  incorrectly considered as static classes.

** Additions
*  Final Class Support
    This release supports declarations of procedures that return final classes as return types. 

** Improvements
* Confinement/Effect Analysis
  Several improvement has been made to the effect/confinement analyzer, allowing the compiler to  detect confinement leaks and possible consistency errors faster and more accurately.  New warnings regarding reference leaks are added.

* Examples
  GA example : Improving the user interface and several changes in the implementation.
  Fibonacci example : Fixing an error in one of the helper methods.    
  Barbershop example : Generalizing the example to demonstrate the design declaration changes introduced in 0.9.2 release.  
  Adding a new example called Mandelbrot.


RELEASE NOTES FOR PANINI 0.9.2

These release notes summarizes changes in Panini 0.9.2 release.
Note that feature releases and bug fixes are cumulative, that is, 
bug fixes in previous update versions are included in subsequent 
update versions.

** Programming language features included in this release

* Unified system declarations and capsule declarations. Capsules can now 
contain a 'design declaration' which allow a capsule to create internal
connections between other private capsule instances. The keyword system
is no longer used.

    capsule C () {
        design {
            C1 other;
        }

        void proc() {
            other.message();
        }
    }

  The names on capsules defined in a design declaration (e.g. other) are
  available in the procedures of the capsule. These names are
  effectively at the field scope level. Names which do not have capsule
  types are confined to the scope of the design declaration.

* Executable capsules. 

  In panini 0.9.1, all systems were executable. Since systems no longer
  exist, some capsules are now executable. Any closed capsules which
  defines a run method may be executed. A closed capsule is one which
  takes no parameters, or a single parameter of type String[].

* Topology operators in design declarations.
  
  wireall
  ring
  assoc
  star

  These operators simplify wiring some of the common connections 
  between capsules.

  wireall -> connects each element in a capsule array to the same set of
             arguments
  If cs is an array of capsules, of length n
  wireall(cs, arg1, arg2, ...);
  becomes
  cs[0](arg1, arg2, ...);
  cs[1](arg1, arg2, ...);
  ...
  cs[n-1](arg1, arg2, ...);

  ring -> connects each element 'N' in a capsule array to element 'N+1'.
          Connects the last element in the array to the first element in
          the array.

  ring(cs);
  becomes
  cs[0](cs[1]);
  cs[1](cs[2]);
  cs[n-1](cs[0]);

  assoc -> Like the array copy method in Java. Associate elements of two
  arrays from a starting index i, for a l items.

  assoc(cs, 3, ds, 2, args)
  becomes
  cs[3](ds[3], args);
  cs[4](ds[4], args);

  star -> similar to wireall.

Known Issues:

1. Panc does not always automatically find the source file for a capsule not
   explicitly included as a file to compile. Use the classpath (-cp) or sourcepath
   (-sourcepath) flag to tell panc where to find source files.

   $> panc -sourcepath . CapsuleName.java

2. Capsule instances connected in a cycle may not terminate. If two capsule
   instances are connected to each other (e.g. capsule instance 'a' is connected
   to capsule instance 'b' and 'b' is connected to 'a') then the automatic capsule
   shutdown mechanism will not work. Panc produces a warning messge for each
   cyclic connection it detects.

RELEASE NOTES FOR PANINI 0.9.1

These release notes summarizes changes in Panini 0.9.1 release.
Note that feature releases and bug fixes are cumulative, that is, 
bug fixes in previous update versions are included in subsequent 
update versions.

** Programming language features included in this release

* Support for capsule initializers.
    capsule C ( D d1, ...) {
      BufferedReader reader;

      => {
        try {
    		reader = ... ;
    	} catch (IOException e) { ... }
      }

    }

* Support for foreach expression.  
      capsule C (Worker[] workers) {
	    void run(){
		 Number[] results = foreach(Worker w: workers) 
		                       w.compute();
        }
      }

* Support for separate compilation. This was one of the most 
  important feature that we have added in this release. It allows 
  capsule declaration and system declaration to be compiled 
  separately. The compiled capsule declaration/s must be in the 
  classpath when compiling the system declaration.

* Better support for sequential consistency analysis. This release
  includes a much better algorithm for sequential consistency 
  analysis that is more precise, modular, and faster compared to 
  our previous implementation. This algorithm discussed by the 
  following report is also the first in its class.
  
  Long et al. "Automatic Detection of Sequential Inconsistencies 
  in Actor-like Systems", Technical Report #13-08, Computer Science,
  Iowa State University, May 20, 2013.
      
** Bug Fixes and Minor Updates

* Compiler now gives proper version information.

* Several new examples were added and improved to illustrate 
  newly added language features.

* Vim syntax hightlighting (editors/panini.vim) for new keywords: capsule,
  system, signature.



RELEASE NOTES FOR PANINI 0.9.0

These release notes summarizes changes in Panini 0.9.0 release.
Note that bug fixes are cumulative, that is, bug fixes in previous 
update versions are included in subsequent update versions.

** Features included in this release

* Support for capsule declarations 
	capsule C ( D d1, ... ) {
    	t s; 
        ...
        void m ( ... ) {    ...   }
    } 

* Support for system declarations 
	system S1 {
		C c1; D d1; // Declaration of capsule instances in this system
        c1 ( d1 ) ;  // Wiring capsule instances together.
	}

* Support for signature declarations
	signature S {
		void m ( ... );
	}
	capsule D implement Signature S {
	 	void m ( ... ) {
	 		...
	 	}
	}

* Support for thread-based implementation of capsules.

* Support for sequential consistency at a capsule instance-level. 
  Capsule procedure calls to a single capsule instance are processed in 
  the order in which they are made. 

* Basic support for confinement violation detection, where the Panini 
  compiler warns users about potentially leaking references to the 
  internal states of the capsule instance.

